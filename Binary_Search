Problem Link: https://leetcode.com/problems/binary-search/
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
APPROACH:  
-> Binary Search Method: Use a divide-and-conquer strategy to efficiently search for a target value in a sorted array.  
-> Initialize Pointers:  
-> Start with two pointers, start pointing to the beginning of the array and end pointing to the last element.  
-> Calculate Middle Index:  
-> Use the formula mid = (start + end) / 2 to determine the middle index of the current search range.  
-> Compare Midpoint Value:  
-> If the value at nums[mid] equals the target, return mid as the index of the target.  
-> Adjust Search Range:  
-> If nums[mid] is less than the target, shift the search range to the right by setting start = mid + 1.  
-> If nums[mid] is greater than the target, shift the search range to the left by setting end = mid - 1.  
-> Repeat Process:  
-> Continue recalculating mid and adjusting the search range until start exceeds end, which indicates the target is not in the array.  
-> Return Result:  
-> If the target is not found, return -1.  

EXAMPLE:  
Input:  
-> nums = [-1, 0, 3, 5, 9, 12]  
-> target = 9  
Process:  
-> Initialize pointers: start = 0, end = 5.  
-> Calculate mid: mid = (0 + 5) / 2 = 2.  
-> Compare: nums[2] = 3, which is less than the target.  
-> Update start: start = mid + 1 = 3.  
-> Recalculate mid: mid = (3 + 5) / 2 = 4.  
-> Compare: nums[4] = 9, which matches the target.  
-> Return mid = 4.  

Output:  
-> Index of the target: 4.  

#CODE:  
class Solution {  
    public int search(int[] nums, int target) {  
        int start = 0, end = nums.length - 1;  
        while (start <= end) {  
            int mid = (start + end) / 2;  
            if (nums[mid] == target) {  
                return mid;  
            } else if (nums[mid] < target) {  
                start = mid + 1;  
            } else {  
                end = mid - 1;  
            }  
        }  
        return -1;  
    }  
}  

EXPLANATION:  
-> Initialize Pointers:  
-> Start and end pointers define the search range, initially covering the entire array.  
-> Calculate Midpoint:  
-> The midpoint index divides the current range into two halves.  
-> Condition Check:  
-> If the value at the midpoint matches the target, return the midpoint index.  
-> Adjust Search Range:  
-> If the midpoint value is smaller than the target, discard the left half by moving start.  
-> If the midpoint value is larger than the target, discard the right half by moving end.  
-> Loop Termination:  
-> The loop continues until the search range is exhausted (start > end).  
-> Return Result:  
-> If the target is found, return its index; otherwise, return -1.  

TIME COMPLEXITY:  
-> Halving Search Range:  
-> The search range is halved at each step, resulting in logarithmic complexity.  
-> Time Complexity: O(log N).  

SPACE COMPLEXITY:  
-> Iterative Approach:  
-> No additional data structures are used, resulting in constant space usage.  
-> Space Complexity: O(1).  
