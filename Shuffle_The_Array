Problem Link: https://leetcode.com/problems/shuffle-the-array/
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
APPROACH:
  -> The task is to rearrange an array nums of size 2n into the format [x1, y1, x2, y2, ..., xn, yn].
  -> Use two pointers to traverse the first half (x-values) and the second half (y-values) of the array simultaneously.

EXAMPLE:
  Input: nums = [2, 5, 1, 3, 4, 7], n = 3  
  Output: [2, 3, 5, 4, 1, 7]  
  Explanation:
    -> Split nums into two halves:  
         -> First half (x-values): [2, 5, 1]  
         -> Second half (y-values): [3, 4, 7].  
    -> Create a new array and alternately place elements from the two halves:
         -> Add 2 (x1), Add 3 (y1)
         -> Add 5 (x2), Add 4 (y2)
         -> Add 1 (x3), Add 7 (y3).  
    -> Result: [2, 3, 5, 4, 1, 7].

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] arr = new int[nums.length];
        int i = 0;
        int j = n;
        int k = 0;
        while (i < n && j < nums.length && k < nums.length) {
            arr[k] = nums[i]; 
            k += 1;
            arr[k] = nums[j]; 
            i++;
            j++;
            k++;
        }
        return arr; 
    }
}
EXPLANATION:
  -> Initialize an empty result array arr of the same size as nums.
  -> Use three pointers:
       -> i to traverse the first half of nums (x-values).
       -> j to traverse the second half of nums (y-values).
       -> k to place elements alternately in the result array.
  -> Alternately add elements from the first and second halves of nums to arr.
  -> Return the shuffled array arr.
ANOTHER EXAMPLE:
  Input: nums = [1, 2, 3, 4, 4, 3, 2, 1], n = 4  
  Output: [1, 4, 2, 3, 3, 2, 4, 1]  
  Explanation:
    -> Split nums into two halves:  
         -> First half (x-values): [1, 2, 3, 4]  
         -> Second half (y-values): [4, 3, 2, 1].  
    -> Create a new array and alternately place elements from the two halves:
         -> Add 1 (x1), Add 4 (y1)
         -> Add 2 (x2), Add 3 (y2)
         -> Add 3 (x3), Add 2 (y3)
         -> Add 4 (x4), Add 1 (y4).  
    -> Result: [1, 4, 2, 3, 3, 2, 4, 1].
TIME COMPLEXITY:
  -> The while loop traverses each half of the array once.
  -> Total Time Complexity: O(n), where n is half the size of the input array.
SPACE COMPLEXITY:
  -> The result array arr takes O(n) space.
  -> Space Complexity: O(n).
