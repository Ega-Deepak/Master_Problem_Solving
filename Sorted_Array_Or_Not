Problem Link: https://www.geeksforgeeks.org/problems/check-if-an-array-is-sorted0701/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
APPROACH:  
   -> Traverse the array while comparing adjacent elements to check if the array is sorted in ascending order.  
   -> Example:  
        -> For the array [1, 2, 3, 4]:  
        -> Every adjacent pair satisfies arr[i] <= arr[i + 1].  
        -> The method will return `true` (indicating the array is sorted).  
        -> For the array [1, 3, 2, 4]:  
        -> The condition arr[i] <= arr[i + 1] is violated (at arr[1] > arr[2]).  
        -> The method will return `false` (indicating the array is not sorted).  

#CODE:  
   class Solution {  
       public boolean arraySortedOrNot(int[] arr) {  
           for (int i = 0; i < arr.length - 1; i++) {  
               if (arr[i] > arr[i + 1]) {  
                   return false;  
               }  
           }  
           return true;  
       }  
   }  

EXPLANATION:  
   -> The method iterates through the array elements using an index i from 0 to arr.length - 2.  
   -> For each pair of adjacent elements arr[i] and arr[i + 1], it checks if arr[i] > arr[i + 1].  
   -> If the condition is true for any pair, the array is not sorted, and the method returns false.  
   -> If the loop completes without finding any unsorted pair, the method returns true, indicating the array is sorted.  

TIME COMPLEXITY:  
   -> The loop runs once through the array, making the time complexity O(N), where 𝑁 is the size of the array.  

SPACE COMPLEXITY:  
   -> The algorithm uses a constant amount of extra space, so the space complexity is O(1).  
