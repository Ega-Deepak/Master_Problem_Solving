Problem Link:https://www.geeksforgeeks.org/problems/third-largest-element/1
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
APPROACH:
  -> Traverse the array while maintaining three variables, max1, max2, and max3, to track the largest, second-largest, and third-largest elements, respectively.
  -> Example:
  -> For the array [5, 3, 9, 1, 7]:
  -> max1 becomes 9 (the largest element).
  -> max2 becomes 7 (the second-largest element).
  -> max3 becomes 5 (the third-largest element).
  -> The method will return 5.
CODE:
  class Solution {
    int thirdLargest(int arr[]) {
        int max1=0,max2=0,max3=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>max1){
                max3=max2;
                max2=max1;
                max1=arr[i];
            }
            else if(arr[i]>max2){
                max3=max2;
                max2=arr[i];
            }
            else if(arr[i]>max3){
                max3=arr[i];
            }
        }
        return max3;
      }
   }
EXPLANATION:
  -> max1 is initialized to 0, representing the largest element.
  -> max2 is initialized to 0, representing the second-largest element.
  -> max3 is initialized to 0, representing the third-largest element.
  -> The loop iterates through each element of the array using the index i from 0 to arr.length - 1.
  -> If the current element arr[i] is greater than max1:
  -> Update max3 to the current value of max2.
  -> Update max2 to the current value of max1.
  -> Update max1 to the current element arr[i].
  -> Else if the current element arr[i] is greater than max2:
  -> Update max3 to the current value of max2.
  -> Update max2 to arr[i].
  -> Else if the current element arr[i] is greater than max3:
  -> Update max3 to arr[i].
  -> After the loop, return max3 as the third-largest element.
TIME COMPLEXITY:
-> The loop runs once through the array, making the time complexity O(N), where N is the size of the array.
SPACE COMPLEXITY:
-> The algorithm uses a constant amount of extra space, so the space complexity is O(1).
