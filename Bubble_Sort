Problem Link: https://www.geeksforgeeks.org/problems/bubble-sort/1
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
APPROACH:  
   -> Use the Bubble Sort algorithm to sort the given array in ascending order.  
   -> Bubble Sort repeatedly swaps adjacent elements if they are in the wrong order.  
   -> The process continues until the array becomes sorted or no swaps are required in a pass.  
   -> Example:  
        -> For the array [4, 3, 2, 1]:  
        -> On the first pass: [3, 2, 1, 4]  
        -> On the second pass: [2, 1, 3, 4]  
        -> On the third pass: [1, 2, 3, 4]  
        -> The method stops early if no swaps occur in a pass.  

#CODE:  
   class Solution {  
       public static void bubbleSort(int arr[]) {  
           int n = arr.length;  
           for (int i = 0; i < n - 1; i++) {  
               int c = 0;  // Counter to track swaps  
               for (int j = 0; j < n - i - 1; j++) {  
                   if (arr[j] > arr[j + 1]) {  
                       // Swap arr[j] and arr[j + 1]  
                       int temp = arr[j];  
                       arr[j] = arr[j + 1];  
                       arr[j + 1] = temp;  
                       c++;  
                   }  
               }  
               // If no swaps occurred, the array is already sorted  
               if (c == 0) {  
                   break;  
               }  
           }  
       }  
   }  

EXPLANATION:  
   -> The outer loop runs from 0 to n-2, where n is the size of the array.  
   -> The inner loop iterates from 0 to n-i-2 for each iteration of the outer loop.  
   -> If arr[j] > arr[j + 1], the elements are swapped to move larger elements toward the end of the array.  
   -> A counter (c) is used to track whether any swaps were made in a pass.  
   -> If no swaps are made (c == 0), the array is already sorted, and the algorithm terminates early.  

TIME COMPLEXITY:  
   -> Best Case (already sorted): O(N), where N is the size of the array.  
   -> Worst Case (reversed array): O(NÂ²).  

SPACE COMPLEXITY:  
   -> The algorithm uses a constant amount of extra space, so the space complexity is O(1).  
