Problem Link: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
APPROACH:  
-> Binary Search Method: Use a modified binary search to efficiently find the first and last occurrence of the target value in a sorted array.
-> Initialize Answer Array:
-> Create an answer array ans = [-1, -1] to store the first and last position of the target.
-> Find First Occurrence:
-> Use binary search to find the first occurrence of the target by shifting the end pointer when a match is found.
-> Find Last Occurrence:
-> Use binary search again to find the last occurrence by shifting the start pointer when a match is found.
-> Return Result:
-> Store the first and last occurrences in the answer array and return it.
EXAMPLE:
Input:
-> nums = [5, 7, 7, 8, 8, 10]
-> target = 8
Process:
-> Find First Occurrence:
-> Initialize pointers: start = 0, end = 5
-> Calculate mid: mid = (0 + 5) / 2 = 2
-> Compare: nums[2] = 7, which is less than the target.
-> Update start: start = mid + 1 = 3
-> Recalculate mid: mid = (3 + 5) / 2 = 4
-> Compare: nums[4] = 8, which matches the target. Update ans = 4.
-> Move end to mid - 1 = 3 to search for an earlier occurrence.
-> Recalculate mid: mid = (3 + 3) / 2 = 3
-> Compare: nums[3] = 8, update ans = 3.
-> Move end = 2, exit loop. First occurrence = 3.
-> Find Last Occurrence:
-> Reset pointers: start = 0, end = 5.
-> Follow similar steps but move start = mid + 1 on match to find the last occurrence.
-> Last occurrence = 4.
Output:
-> Index Range of Target: [3, 4].
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = {-1, -1};
        int start = search(nums, target, true);
        int end = search(nums, target, false);
        ans[0] = start;
        ans[1] = end;
        return ans;
    }
    public int search(int[] arr, int tar, boolean firstIndex) {
        int ans = -1;
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] > tar) {
                end = mid - 1;
            } else if (arr[mid] < tar) {
                start = mid + 1;
            } else {
                ans = mid;
                if (firstIndex) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
        }
        return ans;
    }
}
EXPLANATION:
-> Initialize Answer Array:
-> ans = [-1, -1] to store the first and last index.
-> Binary Search for First Occurrence:
-> Perform binary search while updating end = mid - 1 when a match is found to find the first index.
-> Binary Search for Last Occurrence:
-> Perform binary search while updating start = mid + 1 when a match is found to find the last index.
-> Loop Termination:
-> The loop continues until start > end.
-> Return Result:
-> If the target exists, return [firstIndex, lastIndex]; otherwise, return [-1, -1].
TIME COMPLEXITY:
-> Halving Search Range:
-> Each binary search operation halves the search space, resulting in logarithmic complexity.
-> Time Complexity: O(log N) + O(log N) = O(log N).
SPACE COMPLEXITY:
-> Iterative Approach:
-> No additional data structures are used, resulting in constant space usage.
-> Space Complexity: O(1).
