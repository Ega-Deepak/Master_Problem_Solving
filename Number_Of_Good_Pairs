Problem Link: https://leetcode.com/problems/number-of-good-pairs/  
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
APPROACH:  
  -> The task is to count the number of good pairs in an array nums, where a pair (i, j) is considered good if nums[i] == nums[j] and i < j.  
  -> Use a nested loop to compare each element with all subsequent elements in the array.  
EXAMPLE:  
  Input: nums = [1, 2, 3, 1, 1, 3]  
  Output: 4  
  Explanation:  
    -> Good pairs:  
         -> (0, 3) because nums[0] == nums[3] (both are 1)  
         -> (0, 4) because nums[0] == nums[4] (both are 1)  
         -> (3, 4) because nums[3] == nums[4] (both are 1)  
         -> (2, 5) because nums[2] == nums[5] (both are 3)  
    -> Total good pairs: 4  
class Solution {  
    public int numIdenticalPairs(int[] nums) {  
        int count = 0;  
        for (int i = 0; i < nums.length; i++) {  
            for (int j = i + 1; j < nums.length; j++) {  
                if (nums[i] == nums[j]) {  
                    count += 1;  
                }  
            }  
        }  
        return count;  
    }  
}  
EXPLANATION:  
  -> Initialize count to 0 to track the number of good pairs.  
  -> Use two nested loops:  
       -> Outer loop (index i) iterates through each element in the array.  
       -> Inner loop (index j) compares the current element (nums[i]) with all subsequent elements (nums[j]).  
  -> If nums[i] == nums[j], increment the count.  
  -> Finally, return the total count of good pairs.  
ANOTHER EXAMPLE:  
  Input: nums = [1, 1, 1, 1]  
  Output: 6  
  Explanation:  
    -> Good pairs:  
         -> (0, 1), (0, 2), (0, 3)  
         -> (1, 2), (1, 3)  
         -> (2, 3)  
    -> Total good pairs: 6  
TIME COMPLEXITY:  
  -> The nested loops compare each pair of elements in the array.  
  -> Total Time Complexity: O(n^2), where n is the size of the array.  
SPACE COMPLEXITY:  
  -> The algorithm uses only a constant amount of extra space.  
  -> Space Complexity: O(1).  
