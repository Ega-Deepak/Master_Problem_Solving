Problem Link: https://www.geeksforgeeks.org/problems/selection-sort/1
APPROACH:
  -> Use the Selection Sort algorithm to sort the given array in ascending order.
  -> The algorithm repeatedly selects the minimum element from the unsorted portion of the array and swaps it with the first element in the unsorted portion.
  -> Example:
     -> For the array [4, 3, 2, 1]:
     -> On the first pass: [1, 3, 2, 4]
     -> On the second pass: [1, 2, 3, 4]
     -> On the third pass: [1, 2, 3, 4]
     -> The process continues until the entire array is sorted.
CODE:
   class Solution {
    void selectionSort(int[] arr) {
        int n=arr.length;
        for(int i=0;i<n-1;i++){
            int minIndex=i;
            for(int j=i+1;j<n;j++){
                if(arr[j]<arr[minIndex]){
                    minIndex=j;
                }
            }
            int temp=arr[i];
            arr[i]=arr[minIndex];
            arr[minIndex]=temp;
        }
      }
   }
EXPLANATION:
-> The outer loop runs from 0 to n-2, where n is the size of the array.
-> For each iteration of the outer loop, the inner loop finds the index of the smallest element (minIndex) in the unsorted portion of the array.
-> After finding the minimum element, it is swapped with the first element in the unsorted portion to place it in its correct position.
TIME COMPLEXITY:
-> Best Case: O(N²), where N is the size of the array.
-> Worst Case: O(N²).
SPACE COMPLEXITY:
-> The algorithm uses a constant amount of extra space, so the space complexity is O(1).
