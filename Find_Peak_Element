Problem Link: https://leetcode.com/problems/binary-search/
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
APPROACH:
-> Binary Search Method: Use a divide-and-conquer strategy to efficiently find a peak element.
-> Initialize Pointers:
-> Start with two pointers, start pointing to the beginning of the array and end pointing to the last element.
-> Calculate Middle Index:
-> Use the formula mid = start + (end - start) / 2 to determine the middle index of the current search range.
-> Check Peak Condition:
-> If nums[mid] > nums[mid + 1], then the peak lies in the left half, so update end = mid.
-> If nums.length == 1, return 0 immediately as the only element is the peak.
-> Otherwise, shift start to the right by setting start = mid + 1.
-> Repeat Process:
-> Continue recalculating mid and adjusting the search range until start == end, which indicates the peak element's index.
-> Return Result:
-> The loop exits when start == end, meaning we have found the peak, so return start.
EXAMPLE:
Input:
-> nums = [1, 2, 3, 1]
Process:
-> Initialize pointers: start = 0, end = 3.
-> Calculate mid: mid = 0 + (3 - 0) / 2 = 1.
-> Compare: nums[1] = 2, nums[2] = 3, so move start = mid + 1 = 2.
-> Recalculate mid: mid = 2 + (3 - 2) / 2 = 2.
-> Compare: nums[2] = 3, nums[3] = 1, so move end = mid = 2.
-> Loop exits (start == end == 2).
Output:
-> Peak index: 2 (nums[2] = 3 is the peak).
class Solution {  
    public int findPeakElement(int[] nums) {  
        int start = 0;  
        int end = nums.length - 1;  
        while (start < end) {  
            int mid = start + (end - start) / 2;  
            if (mid != nums.length - 1 && nums[mid] > nums[mid + 1]) {  
                end = mid;  
            } else if (nums.length == 1) {  
                return 0;  
            } else {  
                start = mid + 1;  
            }  
        }  
        return start;  
    }  
}
EXPLANATION:
-> Initialize Pointers:
-> start and end define the search range, initially covering the entire array.
-> Calculate Midpoint:
-> The midpoint index divides the current range into two halves.
-> Peak Check:
-> If nums[mid] > nums[mid + 1], the peak is in the left half (end = mid).
-> If the array has only one element, return 0.
-> Otherwise, move start to the right (start = mid + 1).
-> Loop Termination:
-> The loop continues until start == end, meaning we have found the peak.
-> Return Result:
-> Return start as the peak index.
TIME COMPLEXITY:
-> Halving Search Range:
-> The search range is halved at each step, resulting in logarithmic complexity.
-> Time Complexity: O(log N).
SPACE COMPLEXITY:
-> Iterative Approach:
-> No additional data structures are used, resulting in constant space usage.
-> Space Complexity: O(1).
