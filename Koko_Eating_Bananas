PROBLEM LINK: https://leetcode.com/problems/koko-eating-bananas/  
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
APPROACH:
-> Binary Search Method: Use binary search to determine the minimum possible eating speed for Koko to finish eating all bananas within h hours.
-> Find Maximum Bananas:
-> Determine the maximum number of bananas in any pile since the maximum possible eating speed cannot exceed this value.
-> Initialize Pointers:
-> Set low = 0 (minimum possible speed) and high = maxi (maximum pile size).
-> Calculate Middle Speed:
-> Compute mid = low + (high - low) / 2, representing the current eating speed being tested.
-> Compute Total Hours:
-> Use the banana() function to calculate the total hours required for Koko to eat all bananas at speed mid.
-> Adjust Search Range:
-> If totalH <= h, Koko can eat at this speed or slower, so reduce high = mid - 1.
-> If totalH > h, Koko needs to eat faster, so increase low = mid + 1.
-> Repeat Process:
-> Continue adjusting low and high until low > high, meaning the minimum speed has been found.
-> Return Result:
-> The lowest speed low that allows Koko to finish eating within h hours is returned.
EXAMPLE:
Input:
-> piles = [3, 6, 7, 11]
-> h = 8
Process:
-> Find maximum: maxi = 11.
-> Initialize pointers: low = 0, high = 11.
-> Calculate mid: mid = (0 + 11) / 2 = 5.
-> Compute total hours: totalH = ceil(3/5) + ceil(6/5) + ceil(7/5) + ceil(11/5) = 1 + 2 + 2 + 3 = 8.
-> Since totalH (8) â‰¤ h (8), reduce high: high = mid - 1 = 4.
-> Recalculate mid: mid = (0 + 4) / 2 = 2.
-> Compute total hours: totalH = ceil(3/2) + ceil(6/2) + ceil(7/2) + ceil(11/2) = 2 + 3 + 4 + 6 = 15.
-> Since totalH (15) > h (8), increase low: low = mid + 1 = 3.
-> Repeat process until low = 4, which is the minimum eating speed.
Output:
-> Minimum eating speed: 4.
# CODE:  
class Solution {  
    public int minEatingSpeed(int[] piles, int h) {  
        int maxi = max(piles);  
        int low = 0;  
        int high = maxi;  
        while (low <= high) {  
            int mid = low + (high - low) / 2;  
            int totalH = banana(piles, mid);  
            if (totalH <= h) {  
                high = mid - 1;  
            } else {  
                low = mid + 1;  
            }  
        }  
        return low;  
    }  
    public int max(int[] arr) {  
        int maxi = Integer.MIN_VALUE;  
        for (int i = 0; i < arr.length; i++) {  
            if (arr[i] > maxi) {  
                maxi = arr[i];  
            }  
        }  
        return maxi;  
    }  
    public int banana(int[] arr, int m) {  
        int totalH = 0;  
        for (int i = 0; i < arr.length; i++) {  
            totalH += Math.ceil((double) arr[i] / (double) m);  
        }  
        return totalH;  
    }  
}  
EXPLANATION:
-> Finding Maximum:
-> The max() function finds the largest pile to set the upper bound of the binary search.
-> Binary Search:
-> low is initialized as 0, and high is the largest pile size.
-> The middle value mid is selected as the current eating speed.
-> Total Hours Calculation:
-> The banana() function computes the total hours required at mid speed using the ceiling function.
-> Adjust Search Range:
-> If totalH is within h, we search for a slower speed by updating high = mid - 1.
-> If totalH exceeds h, we search for a faster speed by updating low = mid + 1.
-> Return Result:
-> The lowest valid eating speed is returned as low.
TIME COMPLEXITY:
-> Binary Search on Speed:
-> The search space is reduced by half in each step, resulting in logarithmic complexity.
-> Finding Maximum: O(N).
-> Computing Total Hours: O(N) per iteration.
-> Total Time Complexity: O(N log M), where N is the number of piles and M is the maximum bananas in a pile.
SPACE COMPLEXITY:
-> Iterative Approach:
-> No additional data structures are used, leading to constant space usage.
-> Space Complexity: O(1).
